// ==UserScript==
// @name         awildtool
// @namespace    http://tampermonkey.net/
// @version      0.3
// @description  Make grepolis suck less
// @author       You
// @match        https://*.grepolis.com/*
// @icon         https://www.google.com/s2/favicons?domain=grepolis.com
// @grant        none
// @copyright    2021, awildbrysen(https://openuserjs.org/users/awildbrysen)
// @license      MIT
// @updateURL    https://openuserjs.org/meta/awildbrysen/awildtool.meta.js
// ==/UserScript==

const awt_CommandOverviewColorKey = "awt_CommandOverviewColor_0.1.1";
let awt_CommandOverviewColor = []; // contains: {player, color}

var ColorPickerFactory = require('features/color_picker/factories/color_picker');

function loadCommandOverviewPlayers() {
  var item = JSON.parse(localStorage.getItem(awt_CommandOverviewColorKey));
  if (item != null && item != '') awt_CommandOverviewColor = item;
  else awt_CommandOverviewColor = [];
}

function saveCommandOverviewPlayers() {
  localStorage.setItem(awt_CommandOverviewColorKey, JSON.stringify(awt_CommandOverviewColor));
}

function fillAddedPlayersContent(el, ctx) {
  el.innerHTML = '';

  if (!awt_CommandOverviewColor.forEach) return;

  var ul = document.createElement("ul");
  ul.style = "list-style-type: none;";
  awt_CommandOverviewColor.forEach(p => {
    console.log("adding player: " + p);

    var li = document.createElement("li");
    li.style = "padding: 4px;";
    var div = document.createElement("div");
    div.innerText = p.player;
    div.style = "display: inline-block;";

    var removebtn = document.createElement("div");
    removebtn.classList = "delete_message game_arrow_delete";
    removebtn.addEventListener("click", e => {
      awt_CommandOverviewColor = awt_CommandOverviewColor.filter(x => x.player != p.player)
      saveCommandOverviewPlayers();
      var el = document.querySelector("#awt_addedplayers");
      fillAddedPlayersContent(el)
    });
    var colorbtn = document.createElement("div");
    colorbtn.classList = "highlight_color_btn";
    colorbtn.style = "background: url(https://gpen.innogamescdn.com/images/game/autogenerated/layout/buttons_a0894bd.png) no-repeat -22px -46px; width: 12px; height: 13px; display: inline-block; float: left; cursor: pointer; margin-top: 1px;";
    var colorinner = document.createElement("div");
    colorinner.classList = "btn_color";
    colorbtn.appendChild(colorinner);
    colorinner.style = "width: 8px; height: 9px; position: relative; top: 2px; left: 2px; background-color: " + p.color + ";";
    colorbtn.addEventListener("click", e => {
      var context = {
        main: "awt",
        sub: "awt_settings"
      };
      ColorPickerFactory.openWindow('player', 1, function (new_color, remove_custom_color) {
        var idx = awt_CommandOverviewColor.indexOf(p);
        var x = p;
        x.color = "#" + new_color;
        awt_CommandOverviewColor[idx] = x;
        saveCommandOverviewPlayers();
        var el = document.querySelector("#awt_addedplayers");
        fillAddedPlayersContent(el);
      });
    });

    li.appendChild(colorbtn);
    li.appendChild(removebtn);
    li.appendChild(div);
    ul.appendChild(li);
  });
  el.appendChild(ul);
}

loadCommandOverviewPlayers();

function CommandOverviewColorPlayers() {
  document.querySelectorAll(".js-command-row")
    .forEach(x => {
      var arr = x.querySelectorAll(".gp_player_link, .gp_town_link");
      var found = false;
      arr.forEach(n => {
        var pl = awt_CommandOverviewColor.find(x => x.player == n.innerHTML);
        if (pl != null) {
          x.style = "background: " + pl.color + ";";
        }
      });
      if (found)
        x.style = "background: lightgreen;"
    })
}

function addHook(functionB, functionA, parent) {
  if (typeof parent == 'undefined')
    parent = window;

  for (var i in parent) {
    if (parent[i] === functionA) {
      console.log("function found");
      parent[i] = function () {
        functionA.apply(this, arguments)
        functionB();
        return;
      }

      break;
    }
  }
}

$(document).on("game:load", function () {
  "use strict";

  var windows = require("game/windows/id");

  (function () {
    var button = document.createElement("div");
    button.className = 'btn_settings circle_button awildtool_settings';
    var icon = document.createElement("div");
    icon.className = "icon";
    icon.style = "width: 32px; height: 31px; background-size: contain; background-repeat: no-repeat; background-image: url(https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/google/313/raccoon_1f99d.png);";
    button.addEventListener("click", e => WF.open("awt_settings"));
    button.appendChild(icon);

    var middleBar = document.querySelector(".nui_toolbar").querySelector(".middle");
    middleBar.appendChild(button);
  })();

  (function () {
    require("game/windows/ids").awt_settings = "awt_settings";
    (function () {
      function b(type, ctx) {
        var wrapper = document.createElement("div");
        wrapper.id = "awt_settings_wrapper";

        var title = document.createElement("p");
        title.innerText = "Command Overview Color Util";

        var label = document.createElement("label");
        label.for = "awt_addplayer";
        var input = document.createElement("input");
        input.id = "awt_addplayer";
        var inputWrapper = document.createElement("div");
        var ok = document.createElement("button");
        ok.innerText = "Add";
        ok.addEventListener("click", e => {
          var o = {
            player: input.value,
            color: "#00FF00"
          };
          awt_CommandOverviewColor.push(o);
          saveCommandOverviewPlayers();

          input.value = "";

          var el = document.querySelector("#awt_addedplayers");
          fillAddedPlayersContent(el, ctx)
        });

        inputWrapper.appendChild(label);
        inputWrapper.appendChild(input);
        inputWrapper.appendChild(ok);

        const addedPlayersWrapper = document.createElement("div");
        addedPlayersWrapper.id = "awt_addedplayers";

        fillAddedPlayersContent(addedPlayersWrapper, ctx);

        wrapper.appendChild(title);
        wrapper.appendChild(inputWrapper);
        wrapper.appendChild(addedPlayersWrapper);
        return wrapper;
      }

      (function () {
        var tabController = window.GameControllers.TabController;
        var x = tabController.extend({
          initialize: function () {
            tabController.prototype.initialize.apply(this, arguments);
          },
          render: function () {
            this.getWindowModel().showLoading();
            this.$el.html(b("all", this));
            this.getWindowModel().hideLoading();
          },
        });
        window.GameViews.awt_SettingsAll = x;
      })();
    })();
  })();

  (function () {
    require("game/windows/ids").awt_settings = "awt_settings";
    var views = window.GameViews;
    var windowFactorySettings = window.WindowFactorySettings;
    var ids = require("game/windows/ids");
    var tabs = require("game/windows/tabs");
    var component = ids.awt_settings;
    windowFactorySettings[component] = function (x) {
      x = x || {};

      return us.extend({
        title: "awildtool settings",
        window_type: component,
        minheight: 200,
        maxheight: 500,
        width: 400,
        tabs: [{
          type: "all",
          title: "All",
          content_view_constructor: views.awt_SettingsAll,
          hidden: false,
        }],
        max_instances: 1,
        activepagenr: 0,
        minimizable: !0,
      });
    }
  })();

  addHook(CommandOverviewColorPlayers, CommandsOverview.redrawOverview, CommandsOverview);

    $.Observer(GameEvents.window.open).subscribe(function(e, data) {
        debugger;if (data.context === "dio_units") {
            setTimeout(() => {
                $("#diopegasus").insertAfter("#diogriffin");
                $("#dioladon").insertAfter("#dioharpy");
            }, 150);
        }
    });
});
